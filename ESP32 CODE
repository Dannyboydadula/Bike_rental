#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Define pins
#define SS_PIN 5
#define RST_PIN 22
#define RELAY_PIN 4
#define LED_LOCK_RED_PIN 16
#define LED_UNLOCK_GREEN_PIN 17
#define BUZZER_PIN 21

MFRC522 mfrc522(SS_PIN, RST_PIN);

// WiFi credentials
const char* ssid = "SmartBro_3BCF";
const char* password = "smartbro";

// PHP server endpoint
const char* serverName = "http://192.168.1.195/bike_rental/bike_rental.php";

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();

  // Initialize pins
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(LED_LOCK_RED_PIN, OUTPUT);
  pinMode(LED_UNLOCK_GREEN_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  // Set initial states
  digitalWrite(RELAY_PIN, LOW); // Locked
  digitalWrite(LED_LOCK_RED_PIN, HIGH); // Red LED on
  digitalWrite(LED_UNLOCK_GREEN_PIN, LOW); // Green LED off
  digitalWrite(BUZZER_PIN, LOW); // Buzzer off

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  int retryCount = 0;
  while (WiFi.status() != WL_CONNECTED && retryCount < 10) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
    retryCount++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
  } else {
    Serial.println("Failed to connect to WiFi");
  }
}

void loop() {
  String rfidTag = readRFIDTag();

  if (rfidTag != "") {
    Serial.println("RFID Tag: " + rfidTag);

    if (isAuthorizedTag(rfidTag)) {
      toggleSolenoid();  // Lock or unlock based on state
      logToServer(rfidTag);  // Log RFID data to the server
    } else {
      Serial.println("Unauthorized RFID Tag");
      playUnauthorizedSound();  // Play sound for unauthorized tag
    }
  }
}

String readRFIDTag() {
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    return ""; // No card or read error
  }

  String rfidTag = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    rfidTag += String(mfrc522.uid.uidByte[i], HEX);
  }
  rfidTag.toUpperCase();
  mfrc522.PICC_HaltA();

  // Ensure RFID tag is consistently 8 characters long
  while (rfidTag.length() < 8) {
    rfidTag = "0" + rfidTag;
  }

  return rfidTag;
}

bool isAuthorizedTag(String rfidTag) {
  // Authorized RFID tags
  return (rfidTag == "BCB0D9D9" || // 1st tag
          rfidTag == "255D5C9B" || // 2nd tag
          rfidTag == "2557FC9B" || // 3rd tag
          rfidTag == "3513D9B"  || // 4th tag
          rfidTag == "3547159B" || // 5th tag
          rfidTag == "3536E49B");   // 6th tag
}

void toggleSolenoid() {
  static bool isLocked = true;

  if (isLocked) {
    digitalWrite(RELAY_PIN, HIGH); // Unlock
    digitalWrite(LED_LOCK_RED_PIN, LOW); // Turn off red LED
    digitalWrite(LED_UNLOCK_GREEN_PIN, HIGH); // Turn on green LED
    playUnlockedSound();
    isLocked = false;
    Serial.println("Bike unlocked");
  } else {
    digitalWrite(RELAY_PIN, LOW); // Lock
    digitalWrite(LED_UNLOCK_GREEN_PIN, LOW); // Turn off green LED
    digitalWrite(LED_LOCK_RED_PIN, HIGH); // Turn on red LED
    playLockedSound();
    isLocked = true;
    Serial.println("Bike locked");
  }
}

void playUnlockedSound() {
  for (int i = 0; i < 2; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(100);
    digitalWrite(BUZZER_PIN, LOW);
    delay(100);
  }
}

void playLockedSound() {
  digitalWrite(BUZZER_PIN, HIGH);
  delay(500);
  digitalWrite(BUZZER_PIN, LOW);
}

void playUnauthorizedSound() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(100);
    digitalWrite(BUZZER_PIN, LOW);
    delay(100);
  }
}

void logToServer(String rfidTag) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverName);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    String postData = "rfid=" + rfidTag;
    int httpResponseCode = http.POST(postData);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Server Response: " + response);
    } else {
      Serial.println("Error in HTTP request");
    }

    http.end();
  } else {
    Serial.println("WiFi not connected");
  }
}
